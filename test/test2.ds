sub @8 printFive(@8 var);
{
	.mov	byte[rbp-1], '5';
	.mov	rax, 1;
	.mov	rdi, 1;
	.sub	rbp, 1;
	.mov	rsi, rbp;
	.add	rbp, 1;
	.mov	rdx, 1;
	.syscall;
}
sub @8 printFour(@8 var);
{
	.mov	byte[rbp-1], '4';
	.mov	rax, 1;
	.mov	rdi, 1;
	.sub	rbp, 1;
	.mov	rsi, rbp;
	.add	rbp, 1;
	.mov	rdx, 1;
	.syscall;
}
sub @8 printThree(@8 var);
{
	.mov	byte[rbp-1], '3';
	.mov	rax, 1;
	.mov	rdi, 1;
	.sub	rbp, 1;
	.mov	rsi, rbp;
	.add	rbp, 1;
	.mov	rdx, 1;
	.syscall;
}
sub @8 printTwo(@8 var);
{
	.mov	byte[rbp-1], '2';
	.mov	rax, 1;
	.mov	rdi, 1;
	.sub	rbp, 1;
	.mov	rsi, rbp;
	.add	rbp, 1;
	.mov	rdx, 1;
	.syscall;
}
sub @8 printOne(@8 var);
{
	.mov	byte[rbp-1], '1';
	.mov	rax, 1;
	.mov	rdi, 1;
	.sub	rbp, 1;
	.mov	rsi, rbp;
	.add	rbp, 1;
	.mov	rdx, 1;
	.syscall;
}
sub @8 printZero(@8 var);
{
	.mov	byte[rbp-1], '0';
	.mov	rax, 1;
	.mov	rdi, 1;
	.sub	rbp, 1;
	.mov	rsi, rbp;
	.add	rbp, 1;
	.mov	rdx, 1;
	.syscall;
}
@8 i = 0;
@8 j = 0;
@8 k = 0;
while i != 5
{
	if i == 0
	{
		.call	printZero;
	}
	if i == 1
	{
		.call	printOne;
	}
	if i == 2
	{
		.call	printTwo;
	}
	if i == 3
	{
		.call	printThree;
	}
	if i == 4
	{
		.call	printFour;
	}
	i++;
}
@8 llll = 520;
