section .data;
.str0:
	db	"the length is: ",0;
.str1:
	db	"hello",0;
.str2:
	db	"yo bro what is going on yo",0;
printChar:
	push	rbp;
	mov	rbp, rsp;
	sub	rsp, 0;
	mov	rax, 1;
	mov	rdi, 1;
	add	rbp, 16;
	mov	rsi, rbp;
	sub	rbp, 16;
	mov	rdx, 1;
	syscall;
.SC03:
	add	rsp, 0;
	pop	rbp;
	ret;
getLength:
	push	rbp;
	mov	rbp, rsp;
	sub	rsp, 8;
	push	0;
	pop	QWORD[rbp-8];
.WL10:
	push	QWORD[rbp-8];
	pop	r8;
	inc	r8;
	push	r8;
	pop	QWORD[rbp-8];
.SC10:
	push	QWORD[rbp--16];
	push	QWORD[rbp-8];
	pop	r8;
	pop	r9;
	add	r9, r8;
	push	r9;
	pop	r8;
	movsx	rax, BYTE[r8];
	push	rax;
	push	0;
	pop	r8;
	pop	r9;
	cmp	r9, r8;
	setne	al;
	movzx	r8, al;
	push	r8;
	pop	r8;
	cmp	r8, 1;
	je	.WL10;
	push	QWORD[rbp-8];
	pop	r8;
	jmp	.SC02;
.SC02:
	add	rsp, 8;
	pop	rbp;
	ret;
printNum:
	push	rbp;
	mov	rbp, rsp;
	sub	rsp, 0;
	push	QWORD[rbp--16];
	push	48;
	pop	r8;
	pop	r9;
	add	r9, r8;
	push	r9;
	pop	QWORD[rbp--16];
	mov	rax, 1;
	mov	rdi, 1;
	add	rbp, 16;
	mov	rsi, rbp;
	sub	rbp, 16;
	mov	rdx, 1;
	syscall;
.SC01:
	add	rsp, 0;
	pop	rbp;
	ret;
ddPrint_cstring:
	push	rbp;
	mov	rbp, rsp;
	sub	rsp, 8;
	push	QWORD[rbp--16];
	call	getLength;
	add	rsp, 8;
	push	r8;
	pop	QWORD[rbp-8];
	mov	rax, 1;
	mov	rdi, 1;
	mov	rsi, [rbp+16];
	mov	rdx, [rbp-8];
	syscall;
.SC00:
	add	rsp, 8;
	pop	rbp;
	ret;
global _start
_start:
	push	rbp;
	mov	rbp, rsp;
	sub	rsp, 66;
	push	9;
	push	8;
	pop	r8;
	pop	r9;
	cmp	r9, r8;
	setle	al;
	movzx	r8, al;
	push	r8;
	pop	QWORD[rbp-8];
	push	QWORD[rbp-8];
	call	printNum;
	add	rsp, 8;
	push	.str0;
	pop	QWORD[rbp-16];
	push	10;
	pop	rax;
	mov	BYTE[rbp-17], al;
	movsx	rax, BYTE[rbp-17];
	push	rax;
	call	printChar;
	add	rsp, 8;
	movsx	rax, BYTE[rbp-17];
	push	rax;
	call	printChar;
	add	rsp, 8;
	push	.str1;
	pop	QWORD[rbp-25];
	push	QWORD[rbp-25];
	pop	QWORD[rbp-33];
	push	QWORD[rbp-33];
	call	ddPrint_cstring;
	add	rsp, 8;
	movsx	rax, BYTE[rbp-17];
	push	rax;
	call	printChar;
	add	rsp, 8;
	push	QWORD[rbp-25];
	call	getLength;
	add	rsp, 8;
	push	r8;
	pop	QWORD[rbp-41];
	push	QWORD[rbp-16];
	call	ddPrint_cstring;
	add	rsp, 8;
	push	QWORD[rbp-41];
	call	printNum;
	add	rsp, 8;
	movsx	rax, BYTE[rbp-17];
	push	rax;
	call	printChar;
	add	rsp, 8;
	push	.str2;
	pop	QWORD[rbp-49];
	push	QWORD[rbp-49];
	call	ddPrint_cstring;
	add	rsp, 8;
	movsx	rax, BYTE[rbp-17];
	push	rax;
	call	printChar;
	add	rsp, 8;
	push	0;
	pop	rax;
	mov	BYTE[rbp-50], al;
	push	0;
	pop	QWORD[rbp-58];
.WL04:
	push	QWORD[rbp-49];
	push	QWORD[rbp-58];
	pop	r8;
	pop	r9;
	add	r9, r8;
	push	r9;
	pop	r8;
	movsx	rax, BYTE[r8];
	push	rax;
	pop	rax;
	mov	BYTE[rbp-50], al;
	movsx	rax, BYTE[rbp-50];
	push	rax;
	call	printChar;
	add	rsp, 8;
	push	r8;
	push	QWORD[rbp-58];
	pop	r8;
	inc	r8;
	push	r8;
	pop	QWORD[rbp-58];
.SC04:
	push	QWORD[rbp-49];
	push	QWORD[rbp-58];
	pop	r8;
	pop	r9;
	add	r9, r8;
	push	r9;
	pop	r8;
	movsx	rax, BYTE[r8];
	push	rax;
	push	0;
	pop	r8;
	pop	r9;
	cmp	r9, r8;
	setne	al;
	movzx	r8, al;
	push	r8;
	pop	r8;
	cmp	r8, 1;
	je	.WL04;
	push	4;
	pop	QWORD[rbp-66];
	movsx	rax, BYTE[rbp-17];
	push	rax;
	call	printChar;
	add	rsp, 8;
	mov	eax, 0;
	pop	rbp;
	mov	rax, 60;
	mov	rdi, 0;
	syscall;
