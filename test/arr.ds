@8 none = 0;
.extern	exit;
sub @0 pstr(@8 str)
{
	@8 len = strlen(str);
	.mov	rax, 1;
	.mov	rdi, 1;
	.mov	rsi, [rbp+16];
	.mov	rdx, [rbp-8];
	.syscall;
}
sub @8 strlen(@8 str)
{
	@8 output = 0;
	while @1[str+output] != 0 { output++ }
	return output;
}

sub @8 expect(@8 a, @8 b)
{
	if a != b
	{
		iso pstr(`\x1b[38;2;255;0;0mFAILED\n`);
		iso exit(1);
	}
	iso pstr(`\x1b[38;2;0;255;0mPASSED\n`);
}

sub @8 test_a(@0)
{
	@8 arr = @4<4>;
	@4[arr] = 10 * 2;
	@4[arr+4] = 5;
	iso expect((@4[arr]) + (@4[arr+4]), 25);
}
sub @8 test_b(@0)
{
	@8 arr = @8<4>;
	@8 i = 0;
	while i < 4
	{
		@8[arr+(i*8)] = @4<4>;
		i++;
	}
	i = 0;
	@8 j = 0;
	while i < 4
	{
		j = 0;
		while j < 4
		{
			@4[@8[arr+(i*8)]+(j*4)] = i*j;
			j++;
		}
		i++;
	}
	;iso expect(@4[arr] + @4[arr+4], 23);
}

iso test_a();
iso test_b();

