@8 value = 69;
sub @8 printTrue(@8 var);
{
	@8 funvar = 19-9;
	@4 fun2var = 5*2;
	.mov	byte[rbp-4], 't';
	.mov	byte[rbp-3], 'r';
	.mov	byte[rbp-2], 'u';
	.mov	byte[rbp-1], 'e';
	.mov	byte[rbp-0], 0;
	.mov	rax, 1;
	.mov	rdi, 1;
	.sub	rbp, 4;
	.mov	rsi, rbp;
	.add	rbp, 4;
	.mov	rdx, 4;
	.syscall;
};
sub @8 caller(@8 var);
{
	.mov	byte[rbp-5], 'h';
	.mov	byte[rbp-4], 'e';
	.mov	byte[rbp-3], 'l';
	.mov	byte[rbp-2], 'l';
	.mov	byte[rbp-1], 'o';
	.mov	byte[rbp-0], 0;
	.mov	rax, 1;
	.mov	rdi, 1;
	.sub	rbp, 5;
	.mov	rsi, rbp;
	.add	rbp, 5;
	.mov	rdx, 5;
	.syscall;
};
@8 value2 = 2*5;
sub @8 printHead(@8 var);
{
	.mov	byte[rbp-15], 'T';
	.mov	byte[rbp-14], 'h';
	.mov	byte[rbp-13], 'n';
	.mov	byte[rbp-12], ' ';
	.mov	byte[rbp-11], 'n';
	.mov	byte[rbp-10], 'u';
	.mov	byte[rbp-9], 'm';
	.mov	byte[rbp-8], 'b';
	.mov	byte[rbp-7], 'e';
	.mov	byte[rbp-6], 'r';
	.mov	byte[rbp-5], ' ';
	.mov	byte[rbp-4], 'i';
	.mov	byte[rbp-3], 's';
	.mov	byte[rbp-2], ':';
	.mov	byte[rbp-1], ' ';
	.mov	byte[rbp-0], 0;
	.mov	rax, 1;
	.mov	rdi, 1;
	.sub	rbp, 15;
	.mov	rsi, rbp;
	.add 	rbp, 15;
	.mov	rdx, 15;
	.syscall;
};
sub @8 R11Add2(@8 var);
{
	.add	r11, 2;
};
sub @8 printR11(@8 var);
{
	.mov	r12, r11;
	.add	r12, 48;
	.mov	qword[rbp-8], r12;
	.mov	rax, 1;
	.mov	rdi, 1;
	.sub	rbp, 8;
	.mov	rsi, rbp;
	.add 	rbp, 8;
	.mov	rdx, 1;
	.syscall;
};
sub @8 printSpace(@8 var);
{
	.mov	byte[rbp-1], ' ';
	.mov	byte[rbp-0], 0;
	.mov	rax, 1;
	.mov	rdi, 1;
	.sub	rbp, 1;
	.mov	rsi, rbp;
	.add 	rbp, 1;
	.mov	rdx, 1;
	.syscall;
};
.call	printHead;
.mov	r11, 6;
.call	R11Add2;
.call	printR11;
.call	printSpace;
.call	printSpace;
.call	printSpace;
.call	printSpace;
@8 var2 = 2 * 4;
if (var2 == 8);
{
	.call	printTrue;
	.call	printSpace;
	.call	printSpace;
};
if (8 >= var2);
{
	.call	printTrue;
	.call	printSpace;
	.call	printSpace;
};
